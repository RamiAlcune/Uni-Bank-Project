<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAP//wAH//8AAf//AAH//wCB//+Awf//w4E=
</value>
  </data>
</root>